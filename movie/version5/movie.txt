影片租賃管理系統

需求描述：
1. 完成影片連鎖企業租賃管理系統，可以計算每一位客戶的消費金額和影
	片的詳細信息，金額根據影片的類型和租賃的日期來進行計算
2. 客戶把影片分成3類進行管理  A:最新電影  B:普通電影  C:兒童電影
3. 費用計算規則如下：
a. 是普通電影，如果租期小於2天，費用為2元錢，如果租期大於兩天，費用是
	租期減去2，每天1.5元
b. 如果是新片電影，費用為每天3元
c. 是兒童電影，如果租期小於3天，費用為1.5元錢，如果租期大於三天，費用
	是租期減去3，每天1.5元
4. 每次客戶租賃電影可以為客戶累積積分，規則是每次累計增加1分，如果
	是新片，並且租期大於1天，再增加一分
5. 暫且不要考慮系統介面問題和系統的存儲問題	
---------------------------------------------------------------------------------------------------------
目的：
	1. 完成需求是一方面
	2. 能夠去了解面向對象的設計

version 1.0
a. Movie 電影類
	屬性：name ---> 電影名稱
				priceCode ---> 電影類型
				電影的類型用整數代替
b. Rental 租賃類
	屬性：Movie, days
c. Customer 用戶類
	屬性：名字
	對象數組：容器：存放多個租賃

version 2.0
	a. 在第一個版本中，容器的操作沒有細緻的處理
		如果把容器的擴容，判斷是否存在等操作
		都放入到Customer類中，Customer類就會
		比較臃腫。類的功能應該是單一(設計：單一職責原則)
		把容器的管理單獨寫一個類操作：MyArrayList
		MyArrayList 類：
			1. 操作擴容、添加元素、查找某個元素、判斷是否包含
			2. 容器提供便利的方式
				(設計：如果你提供一個聚集就應該提供遍歷
				所有元素和查找某個元素的方式
				模式：迭代器)
				
		修改 Customer 類
		大家把容器進一步擴展，比如插入元素到某個位置，移除元素

version 3.0
	問題：customer類中，printMessage方法顯得過於擁腫
				函數的功能也應該單一
				printMessage既做了打印，又做了計算積分，還做了計算價錢
				完全可以寫多個方法，來進行細化
				1. 抽取 getPrice 方法 ---> 注意 eclipse 工具的使用
				2. 抽取 getFre 方法
				3. 抽取出來的函數有沒有問題

version 4.0
	問題：version 3.0 經過簡單的重構之後，調理已經比較清晰
				但是發現getPrice方法，和getFre方法所要用到的
				數據都來自於Rental類
				
	就像人在黑板上畫圓，畫圓的行為應該給哪個類？
	在面向對象的設計中，誰擁有數據，誰擁有行為。
	(否則就是類封裝的有問題，總在訪問別人的數據，
	破壞封裝性，特別是這種行為中的數據全部都是
	來自其他的一個類中 ----> 代碼的壞味道的一種
	---> 過於親密的接觸)
	------> 因為圓心、半徑在圓類，所以應該給圓類
	
	通過 eclipse ---> refactor ---> move ---> 進行選擇
	
	方法經過首先移入到了 Rental 類中
	移入之後我們發現最重要的數據還是來自Movie類，
	只是天數來自Rental 類，而Movie數據的操作要複雜很多
	所以需要繼續移動方法
	
	到了這裡我們才把正確的類設計好 ---> 我們是通過重構的方式設計的
	---> 將來應該通過這樣的方式積累能夠直接設計出
	
version 5.0
	Movie 中的 getPrice 方法
	1.	其實還是比較龐大，並且有複雜的switch .... case 
		每個 case 可以認為是一種業務處理
		現在業務簡單，如果將來業務非常複雜，需要複雜的運算，
		並且需要去數據庫取數據等等，就會使得Movie類變龐大
	2.	如果某種分支計算價錢的方式發生變化
		需要去龐大的分支中尋找，而且也是直接在Movie類中修改
		
	有這種想法：
		一開始就不應該用狀態碼，應該用繼承來設計
		Movie類，其中getPrice和getFre為抽象方法
		下面三個子類分別是 ChildrenMovie, R_Movie, NewMovie
		分別重寫 getPrice 和 getFre
	這樣設計暫時有個麻煩：一旦 NewMovie 創建出來，
		永遠就是 NewMovie 對象了，而實際新電影可能將來
		會變成其他電影
		一旦對象創建，是不能改變他所屬的類的。
		
	找出的變化：由於電影的種類發生變化，價錢的計算發生變化，積分也變化
	抽象：抽取 Price 類
				三個子類 ChildrenMoviePrice,  NewMoviePrice,  RMoviePrice
			
				
總結：將來寫程序希望可以盡量的可擴展，但是對於原來的
			代碼盡量的少修改，因為一旦修改以前的代碼
			就意味著要重新編譯、測試、發布等工作
			
			涉及到了：重構、設計模式、設計理念